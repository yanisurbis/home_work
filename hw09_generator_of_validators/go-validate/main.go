package main

import (
	"fmt"
	"strings"
)

//func generateValidation(fieldName string, fieldType string, fieldTag string) {
func generateFieldValidation() string {
	fieldName := "Age"
	fieldType := "int"
	fieldTag := "min:18|max:50"

	validation := ""

	fieldRules := strings.Split(fieldTag, "|")
	for _, fieldRule := range fieldRules {
		ruleNameAndValue := strings.Split(fieldRule, ":")
		ruleName := ruleNameAndValue[0]
		ruleValue := ruleNameAndValue[1]

		if (fieldType == "int") {
			if (ruleName == "min") {
				validation += `
if (x.` + fieldName + ` < ` + ruleValue + `) {
	errs = append(errs, ValidationError{Field: "` + fieldName + `", Err: "Should be more than ` + ruleValue + `"})
}
`
			} else if (ruleName == "max") {
				validation += `
if (x.` + fieldName + ` > ` + ruleValue + `) {
	errs = append(errs, ValidationError{Field: "` + fieldName + `", Err: "Should be less than ` + ruleValue + `"})
}
`
			}
		}
	}

	return validation
}

func generateStructValidation() string {
	return `
// Code generated by cool go-validate tool; DO NOT EDIT.
package models

func (x User) Validate() ([]ValidationError, error) {
    errs := make([]ValidationError, 0) `+ generateFieldValidation() +`

	return errs, nil
}
`
}

func main() {
	//println(generateStructValidation())
	//f, err := os.Create("models_validation_generated.go")
	//if err != nil {
	//	log.Println(err)
	//}
	//f.WriteString(generateStructValidation())
	//f.Close()
	//for _, v := range parseAST() {
	//	fmt.Printf("%+v\n\n\n", v)
	//}

	//fmt.Println(os.Getenv("GOFILE"))

	//path, err := os.Getwd()
	//if err != nil {
	//	log.Println(err)
	//}
	//fmt.Println(path)

	//dat, _ := ioutil.ReadFile("models/models.go")
	//fmt.Print(string(dat))
//	generateFieldValidation()
	fmt.Println(parseTag("hello"))
}
